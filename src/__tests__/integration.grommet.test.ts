import { analyzeTypeScript } from "../typescript"
import { flatMap, indexBy, byKey } from "../utils"

const propsAsPossibleValues: string[] = [
    "symbol",
    "object",
    "div",
    "small",
    "time",
    "link",
    "menu",
    "dialog",
    "text",
    "a",
    "style",
    "title",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "main",
    "map",
    "mark",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noindex",
    "noscript",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "source",
    "span",
    "strong",
    "sub",
    "summary",
    "sup",
    "table",
    "template",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    "webview",
    "svg",
    "animate",
    "animateMotion",
    "animateTransform",
    "circle",
    "clipPath",
    "defs",
    "desc",
    "ellipse",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feDistantLight",
    "feDropShadow",
    "feFlood",
    "feFuncA",
    "feFuncB",
    "feFuncG",
    "feFuncR",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMergeNode",
    "feMorphology",
    "feOffset",
    "fePointLight",
    "feSpecularLighting",
    "feSpotLight",
    "feTile",
    "feTurbulence",
    "filter",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "marker",
    "mask",
    "metadata",
    "mpath",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "switch",
    "textPath",
    "tspan",
    "use",
    "view",
]

describe("integration-test", () => {
    test("grommet", async () => {
        const result = await analyzeTypeScript([`integration-test-data/grommet/node_modules/grommet/index.d.ts`])

        const components = flatMap(result, file => file.components)
        const componentsByName = indexBy(components, c => c.name)
        const componentNames = components.map(comp => comp.name)

        expect(componentNames).toEqual([
            "Accordion",
            "AccordionPanel",
            "Anchor",
            "Box",
            "Button",
            "Calendar",
            "Carousel",
            "Chart",
            "CheckBox",
            "Clock",
            "Collapsible",
            "DataTable",
            "Diagram",
            "Distribution",
            "Drop",
            "DropButton",
            "Form",
            "FormField",
            "Grid",
            "Grommet",
            "Heading",
            "Image",
            "InfiniteScroll",
            "Keyboard",
            "Layer",
            "Markdown",
            "MaskedInput",
            "Menu",
            "Meter",
            "Paragraph",
            "RadioButton",
            "RadioButtonGroup",
            "RangeInput",
            "RangeSelector",
            "RoutedAnchor",
            "RoutedButton",
            "Select",
            "SkipLink",
            "SkipLinks",
            "SkipLinkTarget",
            "Stack",
            "Table",
            "TableBody",
            "TableCell",
            "TableFooter",
            "TableHeader",
            "TableRow",
            "Tab",
            "Tabs",
            "Text",
            "TextArea",
            "TextInput",
            "Video",
            "WorldMap",
            "AnnounceContext",
            "ResponsiveContext",
        ])

        expect(componentsByName["Button"].propTypes.sort(byKey(x => x.name))).toEqual(
            [
                { name: "a11yTitle", type: "string" },
                { name: "active", type: "boolean" },
                { name: "alignSelf", possibleValues: ["start", "center", "end", "stretch"], type: "enum" },
                { name: "as", possibleValues: propsAsPossibleValues, type: "enum" },
                { name: "color", type: "string" },
                { name: "disabled", type: "boolean" },
                { name: "fill", possibleValues: ["horizontal", "vertical"], type: "enum" },
                { name: "focusIndicator", type: "boolean" },
                { name: "gap", type: "string" },
                { name: "gridArea", type: "string" },
                { name: "hoverIndicator", type: "string" },
                { name: "href", type: "string" },
                { name: "icon", type: "unsupported" },
                { name: "label", type: "string" },
                { name: "margin", type: "string" },
                { name: "onClick", type: "unsupported" },
                { name: "plain", type: "boolean" },
                { name: "primary", type: "boolean" },
                { name: "reverse", type: "boolean" },
                { name: "target", possibleValues: ["_self", "_blank", "_parent", "_top"], type: "enum" },
                { name: "type", possibleValues: ["button", "submit", "reset"], type: "enum" },
                { name: "placeholder", type: "string" },
            ].sort(byKey(x => x.name)),
        )

        expect(componentsByName["CheckBox"].propTypes.sort(byKey(x => x.name))).toEqual(
            [
                { name: "checked", type: "boolean" },
                { name: "disabled", type: "boolean" },
                { name: "id", type: "string" },
                { name: "indeterminate", type: "boolean" },
                { name: "label", type: "string" },
                { name: "name", type: "string" },
                { name: "onChange", type: "unsupported" },
                { name: "placeholder", type: "string" },
                { name: "reverse", type: "boolean" },
                { name: "toggle", type: "boolean" },
            ].sort(byKey(x => x.name)),
        )

        expect(componentsByName["TextArea"].propTypes.sort(byKey(x => x.name))).toEqual(
            [
                { name: "disabled", type: "boolean" },
                { name: "fill", type: "boolean" },
                { name: "focusIndicator", type: "boolean" },
                { name: "id", type: "string" },
                { name: "name", type: "string" },
                { name: "onChange", type: "unsupported" },
                { name: "placeholder", type: "string" },
                { name: "plain", type: "boolean" },
                { name: "resize", type: "enum", possibleValues: ["horizontal", "vertical"] },
                { name: "size", type: "string" },
                { name: "value", type: "string" },
            ].sort(byKey(x => x.name)),
        )
    })
})
